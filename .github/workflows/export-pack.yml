name: Export Pack

on:
  workflow_dispatch:
    inputs:
      worker_group:
        description: 'Worker group to export the pack from'
        required: true
        default: 'default'
        type: string
      pack:
        description: 'Pack ID to export (space-separated list)'
        required: true
        type: string
      raise_pr:
        description: 'Raise a Pull Request'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  export:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: login to Cribl (on-prem)
        if: ${{ vars.LEADER_BASE_URI }}
        env:
          PASSWORD: ${{ secrets.PACK_DEPLOYER_PASSWORD }}
          LEADER_BASE_URI: ${{ vars.LEADER_BASE_URI }}
        run: |
          TOKEN=$(curl $LEADER_BASE_URI/api/v1/auth/login \
               -H 'Content-Type: application/json' \
               -d "{\"username\":\"pack_deployer\",\"password\":\"$PASSWORD\"}" 2>/dev/null | \
               jq -r .token)
          
          # Set up the Authentication Header
          echo "AUTH_HEADER=Authorization: Bearer $TOKEN" >> $GITHUB_ENV
          echo "API_BASE_URI=$LEADER_BASE_URI/api/v1/m" >> $GITHUB_ENV

      - name: login to Cribl (Cloud)
        if: ${{ vars.CRIBL_CLIENT_ID && vars.CRIBL_ORG }}
        env:
          CRIBL_CLIENT_SECRET: ${{ secrets.CRIBL_CLIENT_SECRET }}
          CRIBL_CLIENT_ID: ${{ vars.CRIBL_CLIENT_ID }}
          CRIBL_ORG: ${{ vars.CRIBL_ORG }}
        run: |
          AUTH_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://login.cribl.cloud/oauth/token" \
                          -H "Content-Type: application/json" \
                          -d "{\"grant_type\": \"client_credentials\",\"client_id\": \"$CRIBL_CLIENT_ID\", \"client_secret\": \"$CRIBL_CLIENT_SECRET\", \"audience\": \"https://api.cribl.cloud\"}" \
                          || exit 1)
          
          AUTH_HTTP_CODE=$(echo "$AUTH_RESPONSE" | tail -n1)
          ACCESS_TOKEN=$(echo "$AUTH_RESPONSE" | sed '$d' | jq -r '.access_token')
          
          # Checks if the authentication request was successful
          if [ "$AUTH_HTTP_CODE" -eq 200 ]; then
            echo "Request succeeded with status code $AUTH_HTTP_CODE."
            echo "----------------------------------------"
          else
            echo "Request failed with status code $AUTH_HTTP_CODE."
            echo "----------------------------------------"
            # Exit on the first non-200 response
            exit 1
          fi

          # Set up the Authentication Header
          echo "AUTH_HEADER=Authorization: Bearer $ACCESS_TOKEN" >> $GITHUB_ENV
          echo "API_BASE_URI=https://$CRIBL_ORG.cribl.cloud/api/v1/m" >> $GITHUB_ENV

      - name: Export pack, extract and commit to git
        run: |
          for PACK in ${{ inputs.pack }}; do
            echo "Exporting pack '$PACK' from worker group(s): ${{ inputs.worker_group }}"
            WG_ENDPOINT="$API_BASE_URI/${{ inputs.worker_group }}/packs"
            curl -H "$AUTH_HEADER" $WG_ENDPOINT/$PACK/export?mode=merge -o "$PACK.crbl"

            if [ -d "$PACK" ]; then
              echo "Directory '$PACK' already exists, removing it."
              rm -rf "$PACK"
            fi

            mkdir -p "$PACK"

            echo "Extracting '$PACK.crbl' to '$PACK'"
            tar -xzf "$PACK.crbl" -C "$PACK"
            rm -f "$PACK.crbl"

            if [[ -n "$(git status -s)" ]]; then
              echo "Committing changes to '$PACK'"
              git config --global user.name "$GITHUB_TRIGGERING_ACTOR's Pack Exporter"
              git config --global user.email "automation@cribl.io"
              git add "$PACK"
              git commit --author='${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>' \
                        -m "Exported pack '$PACK' from worker group ${{ inputs.worker_group }}"
              git push origin HEAD
            else
              echo "No changes to commit for '$PACK'"
            fi
          done

      - name: Raise Pull Request
        if: ${{ inputs.raise_pr }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Check if Pull Request already exists for '${{ inputs.pack }}'"
          PR_EXISTS=$(gh pr list --search "Exported pack '${{ inputs.pack }}' from worker group ${{ inputs.worker_group }}" --json number --jq '.[0].number' || echo "0")
          if [[ -n "$PR_EXISTS" ]]; then
            echo "Pull Request already exists: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/pull/$PR_EXISTS"
          else
            echo "Raising a Pull Request for exported pack '${{ inputs.pack }}'"
            gh pr create \
              --title "Exported pack '${{ inputs.pack }}' from worker group ${{ inputs.worker_group }}" \
              --body "This PR contains the exported pack '${{ inputs.pack }}' from worker group ${{ inputs.worker_group }}." \
              --base main \
              --head ${{ github.ref_name }} \
              --draft
          fi

      # This is required to trigger the pipeline in the MR, since a push from the action does not trigger the pipeline
      # See: https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#triggering-further-workflow-runs
      - name: Close & Reopen MR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Closing and reopening the MR to trigger the pipeline"
          PR_NUMBER=$(gh pr list --search "Exported pack '${{ inputs.pack }}' from worker group ${{ inputs.worker_group }}" --json number --jq '.[0].number')
          if [[ -n "$PR_NUMBER" ]]; then
            gh pr close $PR_NUMBER
            gh pr reopen $PR_NUMBER
          else
            echo "No open PR found for '${{ inputs.pack }}'"
          fi