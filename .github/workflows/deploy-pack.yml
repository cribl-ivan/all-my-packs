name: Deploy pack(s) to Cribl Worker Groups

on:
  workflow_dispatch:
    inputs:
      worker_group:
        description: 'Worker group to deploy the pack to (space-separated list)'
        required: true
        default: 'default'
        type: string
      packs:
        description: 'Packs to deploy (space-separated list or * for all packs in the repo)'
        required: true
        default: '*'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: login to Cribl (on-prem)
        if: ${{ vars.LEADER_BASE_URI }}
        env:
          PASSWORD: ${{ secrets.PACK_DEPLOYER_PASSWORD }}
          LEADER_BASE_URI: ${{ vars.LEADER_BASE_URI }}
        run: |
          TOKEN=$(curl $LEADER_BASE_URI/api/v1/auth/login \
               -H 'Content-Type: application/json' \
               -d "{\"username\":\"pack_deploy\",\"password\":\"$PASSWORD\"}" 2>/dev/null | \
               jq -r .token)
          
          # Set up the Authentication Header
          export AUTH_HEADER="Authorization: Bearer $TOKEN"
          export API_BASE_URI="$LEADER_BASE_URI/api/v1/m"

      - name: login to Cribl (Cloud)
        if: ${{ vars.CRIBL_CLIENT_ID && vars.CRIBL_ORG }}
        env:
          CRIBL_CLIENT_SECRET: ${{ secrets.CRIBL_CLIENT_SECRET }}
          CRIBL_CLIENT_ID: ${{ vars.CRIBL_CLIENT_ID }}
          CRIBL_ORG: ${{ vars.CRIBL_ORG }}
        run: |
          AUTH_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://login.cribl.cloud/oauth/token" \
                          -H "Content-Type: application/json" \
                          -d "{\"grant_type\": \"client_credentials\",\"client_id\": \"$CRIBL_CLIENT_ID\", \"client_secret\": \"$CRIBL_CLIENT_SECRET\", \"audience\": \"https://api.cribl.cloud\"}" \
                          || exit 1)
          
          AUTH_HTTP_CODE=$(echo "$AUTH_RESPONSE" | tail -n1)
          ACCESS_TOKEN=$(echo "$AUTH_RESPONSE" | sed '$d' | jq -r '.access_token')
          
          # Checks if the authentication request was successful
          if [ "$AUTH_HTTP_CODE" -eq 200 ]; then
            echo "Request succeeded with status code $AUTH_HTTP_CODE."
            echo "----------------------------------------"
          else
            echo "Request failed with status code $AUTH_HTTP_CODE."
            echo "----------------------------------------"
            # Exit on the first non-200 response
            exit 1
          fi

          # Set up the Authentication Header
          export AUTH_HEADER="Authorization: Bearer $ACCESS_TOKEN"
          export API_BASE_URI="https://$CRIBL_ORG.cribl.cloud/api/v1/m"

      - name: Get list of pack asset URLs from release
        id: get_pack_urls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L -v -w "\n%{http_code}" \
                        -H "Accept: application/vnd.github+json" \
                        -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "X-GitHub-Api-Version: 2022-11-28" \
                        $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/tags/$GITHUB_REF_NAME

          RELEASE_RESP=$(curl -L -s -w "\n%{http_code}" \
                        -H "Accept: application/vnd.github+json" \
                        -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "X-GitHub-Api-Version: 2022-11-28" \
                        $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/tags/$GITHUB_REF_NAME \
                        || exit 1)
          RELEASE_HTTP_CODE=$(echo "$RELEASE_RESP" | tail -n1)
          RELEASE_RESPONSE_BODY=$(echo "$RELEASE_RESP" | sed '$d')

          echo "Release response: $RELEASE_RESPONSE_BODY"

          for PACK_URL in $(echo "$RELEASE_RESPONSE_BODY" | jq -r '.assets[] | select(.name | endswith(".crbl")) | .browser_download_url'); do
            PACK_NAME=$(basename "$PACK_URL" .crbl)
            PACK_URL_$PACK_NAME='$PACK_URL'

            echo "Pack URL for $PACK_NAME: $PACK_URL_$PACK_NAME"
            
            if [ '${{ inputs.packs }}' == '*' ]; then
              PACKS_TO_DEPLOY="$PACKS_TO_DEPLOY $PACK_URL"
              echo "Adding $PACK_NAME to packs to deploy"
            else
              if [[ "${{ inputs.packs }}" =~ "$PACK_NAME" ]]; then
                PACKS_TO_DEPLOY="$PACKS_TO_DEPLOY $PACK_URL"
                echo "Adding $PACK_NAME to packs to deploy"
              fi
            fi
          done

          echo "Packs to deploy: $PACKS_TO_DEPLOY"

      - name: Deploy pack(s)
        run: |
          echo "Deploying packs: $PACKS_TO_DEPLOY"

          for PACK_REPO_URL in $PACKS_TO_DEPLOY; do
            PACK=$(basename "$PACK_REPO_URL" .crbl)

            echo "Deploying pack: $PACK from URL: $PACK_REPO_URL"
            
            for WORKER_GROUP in ${{ inputs.worker_group }}; do
              echo "Deploying $PACK to worker group $WORKER_GROUP"

              WG_ENDPOINT="$API_BASE_URI/$WORKER_GROUP/packs"
              INSTALL_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$WG_ENDPOINT" \
                                -H "$AUTH_HEADER" \
                                -H 'Content-Type: application/json' \
                                -d "{\"source\": \"$PACK_REPO_URL\",\"force\":true,\"spec\":\"$GITHUB_REF_NAME\",\"allowCustomFunctions\":false}" \
                                || exit 1)
              INSTALL_HTTP_CODE=$(echo "$INSTALL_RESPONSE" | tail -n1)
              INSTALL_RESPONSE_BODY=$(echo "$INSTALL_RESPONSE" | sed '$d')
              INSTALL_PACK_ID=$(echo "$INSTALL_RESPONSE_BODY" | jq -r '.items[0].id')
              INSTALL_PACK_VERSION=$(echo "$INSTALL_RESPONSE_BODY" | jq -r '.items[0].version')

              # Checks if the pack installation request was successful
              if [ "$INSTALL_HTTP_CODE" -eq 200 ]; then
                  echo "Pack install request succeeded with status code $INSTALL_HTTP_CODE."
                  echo "The pack: $INSTALL_PACK_ID version: $INSTALL_PACK_VERSION was installed to worker group: $WORKER_GROUP."
                  echo "----------------------------------------"
              else
                  echo "Pack install request failed with status code $INSTALL_HTTP_CODE:"
                  echo $INSTALL_RESPONSE_BODY
                  echo "----------------------------------------"
                  # Exit on the first non-200 response
                  exit 1
              fi
            done
          done